/*
 * generated by Xtext
 */
package de.hajoeichler.jenkins.formatting;

import java.util.List;

import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import de.hajoeichler.jenkins.services.JobConfigGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class JobConfigFormatter extends AbstractDeclarativeFormatter {

    @Override
    protected void configureFormatting(FormattingConfig c) {
        JobConfigGrammarAccess jobConfigGrammarAccess = (JobConfigGrammarAccess) getGrammarAccess();
        
        c.setSpace("  "); // we indent 2 spaces

        c.setNoLinewrap(); // never wrap lines that we don't wrap
        List<Assignment> allAssignments = jobConfigGrammarAccess.findAssignments(GrammarUtil.allRules(
                getGrammarAccess().getGrammar()).toArray(new AbstractRule[0]));
        for (Assignment assignment : allAssignments) {
            if (assignment.getTerminal() instanceof RuleCall) {
                RuleCall ruleCall = (RuleCall) assignment.getTerminal();
                if ("INT".equals(ruleCall.getRule().getName())) {
                    c.setLinewrap().after(assignment);
                }
                if ("FqnWithWildCard".equals(ruleCall.getRule().getName())) {
                    c.setLinewrap(2,2,2).after(assignment);
                }
                if ("STRING".equals(ruleCall.getRule().getName())) {
                    c.setLinewrap().after(assignment);
                }
            }
        }

        List<RuleCall> bracketsOpen = jobConfigGrammarAccess.findRuleCalls(jobConfigGrammarAccess.getBracketOpenRule());
        for (RuleCall bracketOpen : bracketsOpen) {
            c.setLinewrap(1, 1, 1).after(bracketOpen);
            c.setIndentationIncrement().after(bracketOpen);
        }

        List<RuleCall> bracketsClose = jobConfigGrammarAccess.findRuleCalls(jobConfigGrammarAccess.getBracketCloseRule());
        for (RuleCall bracketClose : bracketsClose) {
            c.setLinewrap(1, 1, 1).before(bracketClose);
            c.setIndentationDecrement().before(bracketClose);
            c.setLinewrap(1, 1, 1).after(bracketClose);
        }
    }
}
