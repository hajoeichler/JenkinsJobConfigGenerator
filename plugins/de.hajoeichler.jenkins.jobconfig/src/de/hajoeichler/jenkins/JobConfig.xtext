grammar de.hajoeichler.jenkins.JobConfig with org.eclipse.xtext.common.Terminals

generate jobConfig "http://www.hajoeichler.de/jenkins/JobConfig"

Model:
	(imports+=Import)*
	(declSpecs+=DeclSpecs)?
	(group=Group
	|
	config=Config);

Import:
	'import' importedNamespace=FqnWithWildCard;

FqnWithWildCard:
	ID ('.*')?;

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_' | '-') ('a'..'z' | 'A'..'Z' | '_' | '-' | '0'..'9')*;

DeclSpecs:
	"declarations" "("
	decls+=(AntDecl | MavenDecl | LockDecl | MSBuildDecl | WarningsDecl | MatrixDecl)+ // Label | )+
	")";

AntDecl:
	"ant" name=ID;

MavenDecl:
	"maven" name=ID;

LockDecl:
	"lock" name=ID;

MSBuildDecl:
	"msBuild" name=ID;

WarningsDecl:
	"warnings" name=ID;

MatrixDecl:
	"matrix" name=ID "("
	(runSequentially?="runSequentially")?
	axes+=AxisDecl+
	")";

AxisDecl:
	"axis" ("label" label=STRING
	"values" values+=STRING+);

Group:
	"group" name=ID "("
	(configs+=Config)*
	")";

Config:
	(abstract?="abstract")? "job" name=ID ("extends" parentConfig=[Config])? "("
	(disabled?="isDisabled")?
	(oldBuildHandling=OldBuildHandling)?
	(executeConcurrent?="executeConcurrent")?
	("description" description=STRING)?
	(matrixes+=Matrix)*
	("restrictRunning" restrictTo=STRING)?
	('gitUrl' gitUrl=STRING)? // 3rdParty
	(concurrentBuild?="concurrentBuild")?
	(paramSection=ParameterSection)?
	(scm=Scm)?
	(trigger=TriggerSection)?
	(wrapper=WrapperSection)?
	(buildSection=BuildSection)?
	(publisherSection=PublisherSection)?
	")";

Matrix:
	"matrix" matrix=[MatrixDecl];

OldBuildHandling:
	{OldBuildHandling}
	"oldBuilds" "("
	("daysToKeep" daysToKeep=INT)?
	("maxNumberOfBuilds" maxNumberOfBuilds=INT)?
	("daysToKeepArtifact" daysToKeepArtifact=INT)?
	("maxNumberOfBuildsWithArtifact" maxNumberOfBuildsWithArtifact=INT)?
	")";

ParameterSection:
	"params" "("
	parameters+=Parameter+
	")";

Parameter:
	name=STRING "("
	type=ParameterType
	("description" description=STRING)?
	")";

ParameterType:
	StringParam | BooleanParam | ChoiceParam;

StringParam:
	"String" value=STRING;

BooleanParam:
	"Boolean" ((checked?="trueByDefault") | (notChecked?="falseByDefault"));

ChoiceParam:
	"Choice" choices=STRING;

Scm:
	ScmGit | ScmSVN | ScmCVS;

ScmGit: // 3rdParty
	"git" "(" "url" url=STRING ("branch" branch=STRING)? (wipeOutWorkspace?="wipeOutWorkspace")? ("excludedRegions"
	excludedRegions=STRING)? ")";

ScmSVN:
	"svn" "(" "url" url=STRING ("localDir" localDir=STRING)? ("strategy" strategy=STRING) ("browser" browser=STRING)? ")";

ScmCVS:
	"cvs" "(" "cvsroot" root=STRING "modules" modules=STRING (useUpdate?="useUpdate")? ")";

TriggerSection:
	"trigger" "(" buildtriggers+=(TimerTrigger | PollScmTrigger | FirstStartTrigger)+ ")";

TimerTrigger:
	"periodically" timer=STRING;

PollScmTrigger:
	"pollScm" poll=STRING;

FirstStartTrigger: // 3rdParty
	buildOnFirstStart?="buildOnFirstStart";

WrapperSection:
	"wrappers" "("
	wrappers+=(AnsiColor | Release | Timeout | Lock | ExclusiveExecution | MatrixTieParent)+ // Android, TCP Port
	")";

AnsiColor: // 3rdParty
	(ansicolor?='ansicolor');

Release: // 3rdParty
	{Release}
	"release" "("
	(notKeepForever?='notKeepForever')?
	(paramSection=ParameterSection)?
	("pre" preBuildSection=BuildSection)?
	("success" successBuildSection=BuildSection)?
	("failed" failedBuildSection=BuildSection)?
	("final" finalBuildSection=BuildSection)?
	")";

Timeout: // 3rdParty
	"timeout" t=INT (failBuild?='failBuild')?;

Lock: // 3rdParty
	"lock" lock=[LockDecl];

ExclusiveExecution:
	(exclusiveExecution?='exclusiveExecution');

MatrixTieParent:
	"tie matrix parent to" matrixParent=STRING;

BuildSection:
	"builds" "("
	builds+=(Maven | Ant | Shell | Batch | SystemGroovy | MSBuild | TriggerBuilderSection)+
	")";

Maven:
	"maven" version=[MavenDecl] "("
	"goals" mavenGoals=STRING
	("pom" mavenPOM=STRING)?
	("properties" mavenProperties=STRING)?
	(mavenPrivateRepo?="usePrivateRepo")?
	")";

Ant:
	"ant" version=[AntDecl] "("
	("buildFile" buildFile=STRING)?
	("targets" targets=STRING)?
	")";

Shell:
	"sh" "("
	shellScript=STRING
	(append?="append")?
	")";

Batch:
	"batch" "("
	batchScript=STRING
	(append?="append")?
	")";

SystemGroovy:
	"systemGroovy" "("
	groovyScript=STRING
	// TODO support more config
	")";

MSBuild:
	"msbuild" version=[MSBuildDecl] "("
	"buildFile" buildFile=STRING
	("args" targets=STRING)?
	")";

TriggerBuilderSection:
	"triggered builds" "("
	(triggeredBuilds+=TriggeredBuild)+
	")";

TriggeredBuild:
	builds=[Config]
	(blocking?='blocking')?
	(triggerParams+=(CurrentTriggerParams | PropertyFileTriggerParams | PredefinedTriggerParams)+)?;

CurrentTriggerParams:
	currentParams?='currentParams';

PropertyFileTriggerParams:
	'propertyFile' propertyFile=STRING;

PredefinedTriggerParams:
	'predefined' predefined=STRING;

PublisherSection:
	"publishers" "("
	publishers+=(Artifacts | TestResult | ExtMail | DownStream | HTMLPublisher | Warnings | Cobertura | Claim | Rcov |
	FindBugs | HipChat)+
	")";

Artifacts:
	"artifacts" artifacts=STRING (onlyLatest?="onlyLatest")?;

TestResult:
	"testresults" testresults=STRING (longIO?="longIO")?;

	// TODO: support multiple
HTMLPublisher:
	"htmlpublisher" name=STRING "dir" dir=STRING "files" files=STRING (keepPast?='keepPast')?;

Warnings:
	"warnings" parser=[WarningsDecl] ("unstableTotalAll" unstableTotalAll=INT)?;

Cobertura:
	"cobertura" xmlreport=STRING (onlyStable?="onlyStable")?;

Rcov:
	"rcov" reportDir=STRING;

FindBugs:
	"findbugs" results=STRING;

Claim:
	(canClaim?="canClaim");

HipChat:
	{HipChat}
	"hipchat" ("room" room=STRING)? (startNotification?="startNotification")?;

ExtMail:
	{ExtMail}
	"extMail" (mergeWithSuperConfig?="mergeWithSuperConfig")? "("
	("to" to=STRING)?
	("type" type=("html" | "text"))?
	("subject" subject=STRING)?
	("content" content=STRING)?
	("attachments" attachments=STRING)?
	("trigger" "(" (mailTrigger+=MailTrigger)+ ")")?
	")";

MailTrigger:
// TODO: check new types
	type=("Still-Failing" | "Success" | "Fixed" | "Still-Unstable" | "Before-Build" | "Failure" | "Unstable")
	(toList?="toList")? (toCommiter?="toCommiter")? (toRequester?="toRequester")? (toCulprits?="toCulprits")? ("to"
	to=STRING)? ("subject" subject=STRING)? ("content" content=STRING)?;

DownStream:
	{DownStream} "downstream" "(" builds+=DownStreamBuild* ")";

DownStreamBuild:
	builds=[Config] "when" condition=("Stable" | "Unstable" | "Not-Failed" | "Failed" | "Complete")
	triggerParams+=(CurrentTriggerParams | PropertyFileTriggerParams | PredefinedTriggerParams | GitCommitParam)*;

GitCommitParam:
	passThroughGitCommit?="passThroughGitCommit";